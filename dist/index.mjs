var $=Object.defineProperty,K=Object.defineProperties;var T=Object.getOwnPropertyDescriptors;var h=Object.getOwnPropertySymbols;var N=Object.prototype.hasOwnProperty,E=Object.prototype.propertyIsEnumerable;var j=(e,t,s)=>t in e?$(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s,g=(e,t)=>{for(var s in t||(t={}))N.call(t,s)&&j(e,s,t[s]);if(h)for(var s of h(t))E.call(t,s)&&j(e,s,t[s]);return e},d=(e,t)=>K(e,T(t));var m=["string","number","boolean","undefined","null"],A=class{constructor(){this.isProcess=!1;this.resStr=""}start(t){this.resStr+=`interface ${t} { 
`,this.isProcess=!0}end(){return this.resStr+="}",this.resStr}reset(){this.resStr="",this.isProcess=!1}append(t,s){this.resStr+=`  ${t} : ${s}; 
`}},a=new A,w=e=>e.slice(0,1).toUpperCase()+e.slice(1),f=(e,t)=>`I${w(e)}`,p=e=>typeof e=="object"&&e!==null,S=e=>Array.isArray(e),I=e=>{let t=Object.prototype.toString.call(e);return/\[object (.*)]/.exec(t)[1].toLowerCase()},P=(e,t)=>{let s=e.map(I),n=Array.from(new Set(s)),c=n.filter(i=>m.includes(i)),r=n.filter(i=>!m.includes(i)),l=f(t,"array"),o=[];if(r.length>0){let y=e.filter(p).map(b=>Object.keys(b).join("-")),u=Array.from(new Set(y));u.length===1?o.push(l):u.forEach((b,O)=>{o.push(`${l}${O+1}`)})}return c.length>0&&r.length===0?c:c.length===0&&r.length>0?o:c.length>0&&r.length>0?[...c,...o]:[]},C=e=>{let s=e.filter(p).map(r=>d(g({},r),{uniKey:Object.keys(r).join("-")})),n=[],c=[];return s.forEach(r=>{n.includes(r.uniKey)||(n.push(r.uniKey),delete r.uniKey,c.push(r))}),c},k=(e,t)=>{let s=[],n=(r,l)=>{if(S(r)){let o=C(r);o.length<=1?o.forEach(i=>n(i,`${l}`)):o.forEach((i,y)=>n(i,`${l}${y+1}`))}else p(r)&&(s.push({key:l,value:r,type:"object"}),Object.keys(r).forEach(o=>n(r[o],o)))};return n(e,t),s.map(x).join(`

`)},x=e=>{if(e.type==="object"){let t=f(e.key,"object");a.reset(),a.start(t),Object.keys(e.value).forEach(n=>{let c=e.value[n];if(S(c)){let r=P(c,n);a.append(n,`(${r.join("|")})[]`)}else if(p(c)){let r=f(n,"object");a.append(n,r)}else a.append(n,I(c))});let s=a.end();return a.reset(),s}return""},U=(e,t="SomeInterface")=>{try{let s=JSON.parse(e);return k(s,t)}catch(s){console.log(s)}},W=U;export{W as default};
