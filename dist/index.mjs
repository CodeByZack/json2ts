var K=Object.defineProperty,T=Object.defineProperties;var N=Object.getOwnPropertyDescriptors;var b=Object.getOwnPropertySymbols;var E=Object.prototype.hasOwnProperty,k=Object.prototype.propertyIsEnumerable;var h=(e,t,s)=>t in e?K(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s,g=(e,t)=>{for(var s in t||(t={}))E.call(t,s)&&h(e,s,t[s]);if(b)for(var s of b(t))k.call(t,s)&&h(e,s,t[s]);return e},m=(e,t)=>T(e,N(t));var d=["string","number","boolean","undefined","null"],I=class{constructor(){this.isProcess=!1;this.resStr=""}start(t){this.resStr+=`interface ${t} { 
`,this.isProcess=!0}end(){return this.resStr+="}",this.resStr}reset(){this.resStr="",this.isProcess=!1}append(t,s){this.resStr+=`  ${t} : ${s}; 
`}},o=new I,w=e=>e.slice(0,1).toUpperCase()+e.slice(1),l=(e,t)=>`I${w(e)}`,p=e=>typeof e=="object"&&e!==null,S=e=>Array.isArray(e),O=e=>{let t=Object.prototype.toString.call(e);return/\[object (.*)]/.exec(t)[1].toLowerCase()},A=(e,t)=>{let s=e.map(O),n=Array.from(new Set(s)),c=n.filter(a=>d.includes(a)),r=n.filter(a=>!d.includes(a)),y=l(t,"array"),i=[];if(r.length>0){let f=e.filter(p).map(j=>Object.keys(j).join("-")),u=Array.from(new Set(f));u.length===1?i.push(y):u.forEach((j,$)=>{i.push(`${y}${$+1}`)})}return c.length>0&&r.length===0?c:c.length===0&&r.length>0?i:c.length>0&&r.length>0?[...c,...i]:[]},P=e=>{let s=e.filter(p).map(r=>m(g({},r),{uniKey:Object.keys(r).join("-")})),n=[],c=[];return s.forEach(r=>{n.includes(r.uniKey)||(n.push(r.uniKey),delete r.uniKey,c.push(r))}),c},C=(e,t)=>{let s=[],n=(r,y)=>{if(S(r)){let i=P(r);i.length<=1?i.forEach(a=>n(a,`${y}`)):i.forEach((a,f)=>n(a,`${y}${f+1}`))}else p(r)&&(s.push({key:y,value:r,type:"object"}),Object.keys(r).forEach(i=>n(r[i],i)))};return n(e,t),console.log(s),s.map(x).join(`

`)},x=e=>{if(e.type==="array"){let t=l(e.key,"array");o.reset(),o.start(t);let s=A(e.value,e.key);o.append(e.key,`(${s.join("|")})[]`);let n=o.end();return o.reset(),n}if(e.type==="object"){let t=l(e.key,"object");o.reset(),o.start(t),Object.keys(e.value).forEach(n=>{let c=e.value[n];if(S(c)){let r=A(c,n);o.append(n,`(${r.join("|")})[]`)}else if(p(c)){let r=l(n,"object");o.append(n,r)}else o.append(n,O(c))});let s=o.end();return o.reset(),s}return""},U=(e,t="ISomeInterface")=>{try{let s=JSON.parse(e);return C(s,t)}catch(s){console.log(s)}},L=U;export{L as default};
